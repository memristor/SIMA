#include <esp_now.h>
#include <WiFi.h>

// Update with your receiver MAC address
uint8_t broadcastAddress[] = {0x48, 0xE7, 0x29, 0xAF, 0xA8, 0x4C}; 

typedef struct struct_message {
  bool enable;
  bool reset;
} struct_message;

struct_message sendData;

void onSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  Serial.print("Send Status: ");
  Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Success" : "Fail");
}

void setup() {
  Serial.begin(115200);
  WiFi.mode(WIFI_STA);

  if (esp_now_init() != ESP_OK) {
    Serial.println("ESP-NOW initialization failed!");
    return;
  }

  esp_now_register_send_cb(onSent);

  esp_now_peer_info_t peerInfo;
  memcpy(peerInfo.peer_addr, broadcastAddress, 6);
  peerInfo.channel = 0;
  peerInfo.encrypt = false;

  if (esp_now_add_peer(&peerInfo) != ESP_OK) {
    Serial.println("Failed to add peer");
    return;
  }

  // Default initial values
  sendData.enable = false;
  sendData.reset = false;

  Serial.println("Ready for commands: 'start', 'stop', or 'reset'");
}

void loop() {
  if (Serial.available() > 0) {
    String command = Serial.readStringUntil('\n');
    command.trim();

    if (command.equalsIgnoreCase("start")) {
      sendData.enable = true;
      sendData.reset = false;
      Serial.println("Command received: START");

    } else if (command.equalsIgnoreCase("stop")) {
      sendData.enable = false;
      sendData.reset = false;
      Serial.println("Command received: STOP");

    } else if (command.equalsIgnoreCase("reset")) {
      // Do not touch enable flag, just request reset
      sendData.reset = true;
      Serial.println("Command received: RESET");

    } else {
      Serial.println("Invalid command. Use 'start', 'stop' or 'reset'.");
      return;
    }

    // Send the packet
    esp_err_t result = esp_now_send(broadcastAddress, (uint8_t *)&sendData, sizeof(sendData));

    if (result == ESP_OK) {
      Serial.println("Signal sent!");
    } else {
      Serial.println("Failed to send signal");
    }

    // Reset the reset flag after sending (only send it once)
    sendData.reset = false;
  }
}
