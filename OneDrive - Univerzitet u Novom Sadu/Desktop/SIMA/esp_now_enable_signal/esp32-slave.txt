#include <esp_now.h>
#include <WiFi.h>
#include <Dynamixel2Arduino.h>

// Motor setup
#define SERIJSKA_KANAL Serial2
#define TX_PIN 17
#define RX_PIN 16
#define TX_EN_PIN 4
#define ID1 1
#define ID2 2
#define BAUDRATE 115200
#define PROTOCOL 2.0

Dynamixel2Arduino dxl(SERIJSKA_KANAL, TX_EN_PIN);
using namespace ControlTableItem;

typedef struct struct_message {
  bool enable;
  bool reset;
} struct_message;

struct_message receivedData;
bool motors_running = false;
bool previous_motor_state = false;
bool reset_in_progress = false;

void printMotorDebugInfo(uint8_t id) {
  if (dxl.ping(id)) {
    Serial.print("Motor ");
    Serial.print(id);
    Serial.println(" found.");
    
    uint16_t model_number = dxl.getModelNumber(id);
    Serial.print("Model Number: ");
    Serial.println(model_number);
    
    uint8_t mode = dxl.readControlTableItem(OPERATING_MODE, id);
    Serial.print("Operating Mode: ");
    Serial.println(mode);
    
    uint8_t hw_error = dxl.readControlTableItem(HARDWARE_ERROR_STATUS, id);
    Serial.print("Hardware Error Status: ");
    Serial.println(hw_error);
  } else {
    Serial.print("Failed to ping motor ");
    Serial.println(id);
  }

  Serial.println("-----------------------------");
}

void printPosition(){
  int32_t pos1 = dxl.getPresentPosition(ID1);
  int32_t pos2 = dxl.getPresentPosition(ID2);
  
  Serial.print("ID1 position: ");
  Serial.println(pos1);
  Serial.print("ID2 Position: ");
  Serial.println(pos2);
}

void onReceive(const esp_now_recv_info_t *info, const uint8_t *incomingData, int len) {
  memcpy(&receivedData, incomingData, sizeof(receivedData));
  motors_running = receivedData.enable;
  
  // Handle reset
  if (receivedData.reset && !reset_in_progress) {
    reset_in_progress = true;
    Serial.println("Resetting motor positions to 0...");
    
    dxl.torqueOff(ID1);
    dxl.setOperatingMode(ID1, OP_EXTENDED_POSITION);
    dxl.torqueOn(ID1);
    dxl.writeControlTableItem(GOAL_POSITION, ID1, 0);
    
    dxl.torqueOff(ID2);
    dxl.setOperatingMode(ID2, OP_EXTENDED_POSITION);
    dxl.torqueOn(ID2);
    dxl.writeControlTableItem(GOAL_POSITION, ID2, 0);
  }
}

void setup() {
  Serial.begin(115200);
  WiFi.mode(WIFI_STA);
  
  if (esp_now_init() != ESP_OK) {
    Serial.println("ESP-NOW initialization failed!");
    return;
  }
  
  esp_now_register_recv_cb(onReceive);

  SERIJSKA_KANAL.begin(BAUDRATE, SERIAL_8N1, RX_PIN, TX_PIN);
  dxl.begin(BAUDRATE);
  dxl.setPortProtocolVersion(PROTOCOL);

  dxl.torqueOff(ID1);
  dxl.setOperatingMode(ID1, OP_PWM);
  dxl.torqueOn(ID1);

  dxl.torqueOff(ID2);
  dxl.setOperatingMode(ID2, OP_PWM);
  dxl.torqueOn(ID2);

  Serial.println("\n--- Dynamixel Motor Debug Info ---");
  printMotorDebugInfo(ID1);
  printMotorDebugInfo(ID2);

  Serial.println("Waiting for enable signal...");
}

void loop() {
  if (motors_running != previous_motor_state) {
    if (motors_running) {
      Serial.println("Starting positions: ");
      printPosition();
      dxl.writeControlTableItem(GOAL_PWM, ID1, 100);
      dxl.writeControlTableItem(GOAL_PWM, ID2, -100);
      Serial.println("Motors started.");
    } else {
      Serial.println("Ending positions: ");
      printPosition();
      dxl.writeControlTableItem(GOAL_PWM, ID1, 0);
      dxl.writeControlTableItem(GOAL_PWM, ID2, 0);
      Serial.println("Motors stopped.");
    }

    previous_motor_state = motors_running;
  }

  if (reset_in_progress) {

    int32_t pos1 = dxl.getPresentPosition(ID1);
    int32_t pos2 = dxl.getPresentPosition(ID2);

    if (pos1 == 0 && pos2 == 0) {
      Serial.println("Motors reset complete.");
      dxl.torqueOff(ID1);
      dxl.torqueOff(ID2);
      dxl.setOperatingMode(ID1, OP_PWM);
      dxl.setOperatingMode(ID2, OP_PWM);
      dxl.torqueOn(ID1);
      dxl.torqueOn(ID2);
      reset_in_progress = false;
      Serial.println("Motors are now in PWM mode.");
    }
  }

  delay(100);
}
